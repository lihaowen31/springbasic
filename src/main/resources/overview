一.jsp运行原理：
 1.用户第一次访问jsp
 2.服务器会查询目标jsp是否存在
 3.如果存在,服务器会将jsp文件加载到服务器中
 4.服务器将jsp翻译成.java文件
 5.再将.java文件编译成.class文件
 6.再将.class文件加载到内存中执行
 7.最后将生成的html内容发送到浏览器

二.单一职责原则
  引起一个类变化的因素不要多于一个
  ·尽可能让一个类负责相对独立的业务
  ·保证类之间的耦合度低，降低类的复杂度

三.外观模式（Facade Pattern）
 子系统的外部与其内部的通信必须通过统一的对象进行
  提供一个高层次的接口（入口），使得子系统更易于使用

四.通过slf4j实现对多种日志框架的兼容
 尽管在工程中只使用了 log4j 这一种日志框架，但如果我们引入的其他jar包中使用了如 logback 等其他日志框架，对我们来讲，直接引入 slf4j 就可以完美地兼容，
 当系统更换日志源时，也不需要更改相关的日志代码；

 slf4j 入口是众多日志的集合，不负责具体的日志实现，只在编译时，寻找合适的日志框架进行绑定；

 当然，slf4j无论如何也不能让不同的日志框架遵循统一的接口规范供其调用。
 为了解决这些差异，就需要再引入一层适配层，后面会讲适配器模式。

五.简单工厂模式
 定义一个工厂类，根据传入的参数的值不同返回不同的实例
 特点：被创建的实例具有共同的父类或接口
 适用场景：
   需要创建的对象较少
   客户端不关心对象的创建过程
 优点：
   可以对创建的对象进行“加工”，对客户端隐藏相关细节
 缺点：
   因创建逻辑复杂或创建对象过多而造成代码臃肿
   新增、删除子类均会违反开闭原则

六.开闭原则
  一个软件实体，应该对扩展开放，对修改关闭
  但所有原则并非一定要严格遵守，而是需要结合业务的实际情况



